plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        keyData {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    compileSdkVersion configs.compileSdkVersion
    buildToolsVersion configs.buildToolsVersion
    defaultConfig {
        applicationId "com.hg.uxdemo"
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Enabling MultiDex Support.
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        ndk {
            // 设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"/*, "x86", "x86_64"*/
        }

        buildConfigField('String', 'MetaDataKeyChannel', configs.MetaDataKeyChannel)
        buildConfigField('String', 'BuglyAppId', "\"${configs.BuglyAppId}\"")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.keyData
        }
        debug {
            signingConfig signingConfigs.keyData
        }
    }

    sourceSets {
        main() {
            jniLibs.srcDirs = ['jniLibs']
        }
    }
    buildFeatures {
        dataBinding = true
        // for view binding :
//        viewBinding = true
    }
    compileOptions {
        // JDK8兼容扩展库
        coreLibraryDesugaringEnabled true
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    productFlavors {
        // 开发模式
        DevelopmentMode {
            manifestPlaceholders = [
                    APP_CHANNEL_VALUE: "DevelopmentMode",
            ]
            dimension = 'default'
        }

        // 生产模式
        ProductionMode {
            manifestPlaceholders = [
                    APP_CHANNEL_VALUE: "ProductionMode",
            ]
            dimension = 'default'
        }
    }

    // 打包APK重命名
    // 如果使用热插件模块，此处请删除，否则无法正常打包
    applicationVariants.all { variant ->
        def stringsXmlAppName = getAppNameByStringsXml(project)
        variant.outputs.all {
//            def version = "V${versionName}"
//            def apkName = stringsXmlAppName
//            def fileName = "${apkName}-${version}-${variant.buildType.name}-${releaseTime()}.apk"
//            // 修改打包路径
//            // variant.packageApplicationProvider.get().outputDirectory = new File("D:/APK/${project.name}/${variant.buildType.name}/")
//            outputFileName = fileName

            String temp = outputFileName
            String channelName = temp.substring(temp.indexOf("-") + 1, temp.lastIndexOf("-"))
            String appTypeName = AppTypeName[channelName]
            String buildTypeName = variant.buildType.name

            def version = "V${versionName}"
            def apkName = stringsXmlAppName
            def fileName = "${apkName}-${appTypeName}-${version}-${buildTypeName}-${releaseTime()}.apk"
            // 修改打包路径
            if (buildTypeName == "release") {
                variant.packageApplicationProvider.get().outputDirectory = new File("D:/APK/Zero-Demo/${appTypeName}/${buildTypeName}/")
            }
            outputFileName = fileName
        }
    }
}

static def getAppNameByStringsXml(Project project) {

    String projectPath = project.projectDir.getAbsolutePath()
    def xmlFile = new File("${projectPath}/src/main/res/values/strings.xml")
    def xml = new XmlParser().parse(xmlFile)
    def stringsXmlAppName = project.name

    xml.each {
        def stringName = it.attribute("name")
        if (stringName == "app_name") {
            def stringValue = it.value()
            stringsXmlAppName = stringValue[0]
        }
    }

//    println("名字：$stringsXmlAppName")

    return stringsXmlAppName
}

static def releaseTime() {
    return new Date().format("yyyy.MM.dd HH.mm.ss", TimeZone.getDefault())
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // JDK8兼容扩展库
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation (libs.Zero){
        exclude group: 'com.github.op123355569', module: 'UltimateBarX'
    }
    implementation 'com.gitee.zackratos:UltimateBarX:0.6.1'
    // Room注解器
    kapt 'androidx.room:room-compiler:2.3.0'
    // Glide注解器
    kapt 'com.github.bumptech.glide:compiler:4.12.0'
}